{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      plate: '',\n      cardId: '',\n      parkMovements: [],\n      errorMessage: null\n    };\n  },\n  mounted() {\n    this.fetchParkMovements();\n  },\n  methods: {\n    async fetchParkMovements() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/v1/park-movements/');\n        this.parkMovements = response.data;\n      } catch (error) {\n        console.error(error);\n        this.errorMessage = 'Erro ao buscar veículos no pátio.';\n      }\n    },\n    async registerEntry() {\n      this.errorMessage = null;\n      try {\n        const response = await axios.post('http://localhost:8000/api/v1/park-movements/', {\n          plate: this.plate,\n          card_id: this.cardId\n        });\n        this.fetchParkMovements(); // Atualiza a lista de veículos no pátio\n        this.plate = ''; // Limpa o campo de placa após o sucesso\n        this.cardId = ''; // Limpa o campo de ID do cartão após o sucesso\n      } catch (error) {\n        console.error(error);\n        if (error.response && error.response.data && error.response.data.error) {\n          this.errorMessage = error.response.data.error;\n        } else {\n          this.errorMessage = 'Erro ao registrar entrada.';\n        }\n      }\n    },\n    async registerExit(movementId) {\n      this.errorMessage = null;\n      try {\n        const response = await axios.patch(`http://localhost:8000/api/v1/park-movements/${movementId}/`, {\n          exit_date: new Date().toISOString()\n        });\n        this.fetchParkMovements();\n        this.amount = response.data.value;\n      } catch (error) {\n        console.error(error);\n        if (error.response && error.response.data && error.response.data.error) {\n          this.errorMessage = error.response.data.error;\n        } else {\n          this.errorMessage = 'Erro ao registrar saída.';\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","plate","cardId","parkMovements","errorMessage","mounted","fetchParkMovements","methods","response","get","error","console","registerEntry","post","card_id","registerExit","movementId","patch","exit_date","Date","toISOString","amount","value"],"sources":["C:\\Users\\Lucas\\Desktop\\teste_cp_ex2\\frontend\\src\\components\\Operation.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <h1>Operação</h1>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h2>Entrada de Veículo</h2>\r\n        <div class=\"form-group\">\r\n          <label for=\"plateInput\">Placa:</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"plateInput\" v-model=\"plate\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"cardIdInput\">ID do Cartão:</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"cardIdInput\" v-model=\"cardId\" />\r\n        </div>\r\n        <button class=\"btn btn-primary\" @click=\"registerEntry\">Registrar Entrada</button>\r\n        <div v-if=\"errorMessage\" class=\"alert alert-danger mt-3\">{{ errorMessage }}</div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <h2>Veículos no Pátio</h2>\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Placa</th>\r\n              <th>ID do Cartão</th>\r\n              <th>Entrada</th>\r\n              <th>Ações</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"movement in parkMovements\" :key=\"movement.id\">\r\n              <td>{{ movement.vehicle.plate }}</td>\r\n              <td>{{ movement.vehicle.customer ? movement.vehicle.customer.card_id : '' }}</td>\r\n              <td>{{ new Date(movement.entry_date).toLocaleString() }}</td>\r\n              <td>\r\n                <button class=\"btn btn-danger btn-sm\" @click=\"registerExit(movement.id)\" :disabled=\"movement.exit_date\">Registrar Saída</button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      plate: '',\r\n      cardId: '',\r\n      parkMovements: [],\r\n      errorMessage: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchParkMovements();\r\n  },\r\n  methods: {\r\n    async fetchParkMovements() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/v1/park-movements/');\r\n        this.parkMovements = response.data;\r\n      } catch (error) {\r\n        console.error(error);\r\n        this.errorMessage = 'Erro ao buscar veículos no pátio.';\r\n      }\r\n    },\r\n    async registerEntry() {\r\n      this.errorMessage = null;\r\n      try {\r\n        const response = await axios.post('http://localhost:8000/api/v1/park-movements/', {\r\n          plate: this.plate,\r\n          card_id: this.cardId,\r\n        });\r\n        this.fetchParkMovements(); // Atualiza a lista de veículos no pátio\r\n        this.plate = ''; // Limpa o campo de placa após o sucesso\r\n        this.cardId = ''; // Limpa o campo de ID do cartão após o sucesso\r\n      } catch (error) {\r\n        console.error(error);\r\n        if (error.response && error.response.data && error.response.data.error) {\r\n          this.errorMessage = error.response.data.error;\r\n        } else {\r\n          this.errorMessage = 'Erro ao registrar entrada.';\r\n        }\r\n      }\r\n    },\r\n    async registerExit(movementId) {\r\n      this.errorMessage = null;\r\n      try {\r\n        const response = await axios.patch(`http://localhost:8000/api/v1/park-movements/${movementId}/`, {\r\n          exit_date: new Date().toISOString(),\r\n        });\r\n        this.fetchParkMovements();\r\n        this.amount = response.data.value\r\n      } catch (error) {\r\n        console.error(error);\r\n        if (error.response && error.response.data && error.response.data.error) {\r\n          this.errorMessage = error.response.data.error;\r\n        } else {\r\n          this.errorMessage = 'Erro ao registrar saída.';\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"AA6CA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,8CAA8C,CAAC;QAChF,IAAI,CAACN,aAAY,GAAIK,QAAQ,CAACR,IAAI;MACpC,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,IAAI,CAACN,YAAW,GAAI,mCAAmC;MACzD;IACF,CAAC;IACD,MAAMQ,aAAaA,CAAA,EAAG;MACpB,IAAI,CAACR,YAAW,GAAI,IAAI;MACxB,IAAI;QACF,MAAMI,QAAO,GAAI,MAAMT,KAAK,CAACc,IAAI,CAAC,8CAA8C,EAAE;UAChFZ,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBa,OAAO,EAAE,IAAI,CAACZ;QAChB,CAAC,CAAC;QACF,IAAI,CAACI,kBAAkB,CAAC,CAAC,EAAE;QAC3B,IAAI,CAACL,KAAI,GAAI,EAAE,EAAE;QACjB,IAAI,CAACC,MAAK,GAAI,EAAE,EAAE;MACpB,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,IAAIA,KAAK,CAACF,QAAO,IAAKE,KAAK,CAACF,QAAQ,CAACR,IAAG,IAAKU,KAAK,CAACF,QAAQ,CAACR,IAAI,CAACU,KAAK,EAAE;UACtE,IAAI,CAACN,YAAW,GAAIM,KAAK,CAACF,QAAQ,CAACR,IAAI,CAACU,KAAK;QAC/C,OAAO;UACL,IAAI,CAACN,YAAW,GAAI,4BAA4B;QAClD;MACF;IACF,CAAC;IACD,MAAMW,YAAYA,CAACC,UAAU,EAAE;MAC7B,IAAI,CAACZ,YAAW,GAAI,IAAI;MACxB,IAAI;QACF,MAAMI,QAAO,GAAI,MAAMT,KAAK,CAACkB,KAAK,CAAE,+CAA8CD,UAAW,GAAE,EAAE;UAC/FE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;QACF,IAAI,CAACd,kBAAkB,CAAC,CAAC;QACzB,IAAI,CAACe,MAAK,GAAIb,QAAQ,CAACR,IAAI,CAACsB,KAAI;MAClC,EAAE,OAAOZ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,IAAIA,KAAK,CAACF,QAAO,IAAKE,KAAK,CAACF,QAAQ,CAACR,IAAG,IAAKU,KAAK,CAACF,QAAQ,CAACR,IAAI,CAACU,KAAK,EAAE;UACtE,IAAI,CAACN,YAAW,GAAIM,KAAK,CAACF,QAAQ,CAACR,IAAI,CAACU,KAAK;QAC/C,OAAO;UACL,IAAI,CAACN,YAAW,GAAI,0BAA0B;QAChD;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}